--In your company there hasn't been a database
--table with all the employee information yet.
--You need to set up the table called employees in the following way:


create table employees
(emp_id int primary key,
first_name char(20),
last_name char(20),
job_position char(30),
salary numeric(8,2),
start_date date,
birth_date date,
store_id int,
department_id int,
manager_id int
check(first_name is not null and 
last_name is not null and job_position 
is not null and 
start_date is not null and 
birth_date is not null ));

-- Set up an additional table called departments in the following way:

create table departments
(department_id int primary key not null,
department char(20) not null,
division char(20) not null);

--Alter the employees table in the following way:
-- Set the column department_id to not null.

 Alter table departments
alter column
department_id set not null;


-- Add a default value of CURRENT_DATE to the column start_date.

alter table employees
alter column start_date 
set default current_date;

-- Add the column end_date with an appropriate data type (one that you think makes sense).

alter table employees
add column end_date date;
Alter table employees
drop column end_date;

-- Add a constraint called birth_check that doesn't allow birth dates that are in the future.

Alter table employees
add constraint birth_check 
check (birth_date <= current_date);

-- Rename the column job_position to position_title.

Alter table employees
rename column job_position to position_title;
Alter table employees
alter column position_title 
set data type varchar(50);


select * from employees;
Insert into employees
values
(1,'Morrie','Conaboy','CTO',21268.94,'2005-04-30','1983-07-10',1,1,NULL,NULL),
(2,'Miller','McQuarter','Head of BI',14614.00,'2019-07-23','1978-11-09',1,1,1,NULL),
(3,'Christalle','McKenny','Head of Sales',12587.00,'1999-02-05','1973-01-09',2,3,1,NULL),
(4,'Sumner','Seares','SQL Analyst',9515.00,'2006-05-31','1976-08-03',2,1,6,NULL),
(5,'Romain','Hacard','BI Consultant',7107.00,'2012-09-24','1984-07-14',1,1,6,NULL),
(6,'Ely','Luscombe','Team Lead Analytics',12564.00,'2002-06-12','1974-08-01',1,1,2,NULL),
(7,'Clywd','Filyashin','Senior SQL Analyst',10510.00,'2010-04-05','1989-07-23',2,1,2,NULL),
(8,'Christopher','Blague','SQL Analyst',9428.00,'2007-09-30','1990-12-07',2,2,6,NULL),
(9,'Roddie','Izen','Software Engineer',4937.00,'2019-03-22','2008-08-30',1,4,6,NULL),
(10,'Ammamaria','Izhak','Customer Support',2355.00,'2005-03-17','1974-07-27',2,5,3,'2013-04-14'),
(11,'Carlyn','Stripp','Customer Support',3060.00,'2013-09-06','1981-09-05',1,5,3,NULL),
(12,'Reuben','McRorie','Software Engineer',7119.00,'1995-12-31','1958-08-15',1,5,6,NULL),
(13,'Gates','Raison','Marketing Specialist',3910.00,'2013-07-18','1986-06-24',1,3,3,NULL),
(14,'Jordanna','Raitt','Marketing Specialist',5844.00,'2011-10-23','1993-03-16',2,3,3,NULL),
(15,'Guendolen','Motton','BI Consultant',8330.00,'2011-01-10','1980-10-22',2,3,6,NULL),
(16,'Doria','Turbat','Senior SQL Analyst',9278.00,'2010-08-15','1983-01-11',1,1,6,NULL),
(17,'Cort','Bewlie','Project Manager',5463.00,'2013-05-26','1986-10-05',1,5,3,NULL),
(18,'Margarita','Eaden','SQL Analyst',5977.00,'2014-09-24','1978-10-08',2,1,6,'2020-03-16'),
(19,'Hetty','Kingaby','SQL Analyst',7541.00,'2009-08-17','1999-04-25',1,2,6,NULL),
(20,'Lief','Robardley','SQL Analyst',8981.00,'2002-10-23','1971-01-25',2,3,6,'2016-07-01'),
(21,'Zaneta','Carlozzi','Working Student',1525.00,'2006-08-29','1995-04-16',1,3,6,'2012-02-19'),
(22,'Giana','Matz','Working Student',1036.00,'2016-03-18','1987-09-25',1,3,6,NULL),
(23,'Hamil','Evershed','Web Developper',3088.00,'2022-02-03','2012-03-30',1,4,2,NULL),
(24,'Lowe','Diamant','Web Developper',6418.00,'2018-12-31','2002-09-07',1,4,2,NULL),
(25,'Jack','Franklin','SQL Analyst',6771.00,'2013-05-18','2005-10-04',1,2,2,NULL),
(26,'Jessica','Brown','SQL Analyst',8566.00,'2003-10-23','1965-01-29',1,1,2,NULL);

--
INSERT INTO departments
VALUES (1, 'Analytics','IT'),
(2, 'Finance','Administration'),
(3, 'Sales','Sales'),
(4, 'Website','IT'),
(5, 'Back Office','Administration');

--Jack Franklin gets promoted to 'Senior SQL Analyst' and the salary raises to 7200.
--Update the values accordingly.

Update employees
set position_title = 'Senior SQL Analyst'
, salary = 7200
where first_name = 'Jack' and last_name='Franklin';

--The responsible people decided to rename the position_title Customer Support to Customer Specialist.
--Update the values accordingly.

update employees
set position_title ='Customer Specialist'
where position_title = 'Customer Support';

--All SQL Analysts including Senior SQL Analysts get a raise of 6%.
--Upate the salaries accordingly.

update employees
set salary = salary*1.06
where position_title like '%SQL Analyst';

--What is the average salary of a SQL Analyst in the company (excluding Senior SQL Analyst)?

select round(avg(salary),2) 
from employees
where position_title ='SQL Analyst';

select * from employees
where position_title ilike '%sql analyst';

-- Write a query that adds a column called manager that contains  first_name and last_name (in one column) in the data output.

select first_name||' '||last_name as manager
from employees;

-- Secondly, add a column called is_active with 'false' if the employee has left the company already, otherwise the value is 'true'.

select
*,
case when end_date is null then false
when end_date is not null then true
end
as is_active
from employees; 

-- Create a view called v_employees_info from that previous query.

CREATE VIEW v_employees_info
AS
SELECT 
emp.*,
CASE WHEN emp.end_date IS NULL THEN 'true'
ELSE 'false' 
END as is_active,
mng.first_name ||' '|| mng.last_name AS manager_name
FROM employees emp
LEFT JOIN employees mng
ON emp.manager_id=mng.emp_id;

-- Write a query that returns the average salaries for each positions with appropriate roundings.

select position_title, round(avg(salary),2) as 
avg_salary from employees
group by position_title
order by avg_salary;

--What is the average salary for a Software Engineer in the company.

select position_title, round(avg(salary),2) as 
avg_salary from employees
where position_title ='Software Engineer'
group by position_title
order by avg_salary;

-- Write a query that returns the average salaries per division.

select
division,
round(avg(salary),2) 
from employees e
left join departments d on
e.department_id= d.department_id
group by division;

-- Write a query that returns the following:
--emp_id,first_name,last_name,position_title,salary and a column that returns the average salary for every position_title. Order the results by the emp_id.

select
emp_id,
first_name,
last_name,
position_title,
salary,
round(avg(salary) over(partition by position_title),2)
as avg_position_sal
from employees
order by 1;

-- How many people earn less than there avg_position_salary?

select count(*) from
(select
emp_id,
first_name,
last_name,
position_title,
salary,
round(avg(salary) over(partition by position_title),2)
as avg_position_sal
from employees)
where salary < avg_position_sal;

-- Write a query that returns a running total of the salary development by the start_date.
--In your calculation, you can assume their salary has not changed over time, and you can disregard the fact that people have left the company (write the query as if they were still working for the company).

select 
emp_id,salary,start_date,
sum(salary) over(order by start_date
) as running_total_of_salary
from employees;

--Create the same running total but now also consider the fact that people were leaving the company.
select
emp_id,salary,
start_date,
sum(salary) over(order by start_date)
from(
select
emp_id,
salary,
start_date
from employees
union
select
emp_id,
salary,
end_date
from v_employees_info
where is_active ='false'
order by start_date) a ;

--Write a query that outputs only the top earner per position_title including first_name and position_title and their salary.

select first_name,position_title,salary
from employees
where position_title='SQL Analyst'
order by salary desc;

--Add also the average salary per position_title.
SELECT
first_name,
position_title,
salary,
(SELECT ROUND(AVG(salary),2) as avg_in_pos FROM employees e3
WHERE e1.position_title=e3.position_title)
FROM employees e1
WHERE salary = (SELECT MAX(salary)
			   FROM employees e2
			   WHERE e1.position_title=e2.position_title);
 
-- Remove those employees from the output of the previous query that has the same salary as the average of their position_title.
SELECT
first_name,
position_title,
salary,
(SELECT ROUND(AVG(salary),2) as avg_in_pos FROM employees e3
WHERE e1.position_title=e3.position_title)
FROM employees e1
WHERE salary = (SELECT MAX(salary)
			   FROM employees e2
			   WHERE e1.position_title=e2.position_title)
			   AND salary<>(SELECT ROUND(AVG(salary),2) as avg_in_pos FROM employees e3
WHERE e1.position_title=e3.position_title);

-- Write a query that returns all meaningful aggregations of sum of salary, number of employees,average salary grouped by all meaningful combinations ofdivision,department,position_title.

select 
division,
department,
position_title,
sum(salary),
count(emp_id),
round(avg(salary),2)
from employees 
Natural join departments 
group by
rollup(division,department,position_title)
order by 1,2,3;

--Write a query that returns all employees (emp_id) including their position_title, department, their salary, and the rank of that salary partitioned by department.
--The highest salary per division should have rank 1.

select emp_id,position_title,department,salary,
rank() over(partition by department 
order by salary desc)
from employees 
natural left join departments;

-- Write a query that returns only the top earner of each department includingtheir emp_id, position_title, department, and their salary.
select * from
(select emp_id,position_title,department,salary,
rank() over(partition by department 
order by salary desc)
from employees 
natural left join departments) a
where rank = 1;


